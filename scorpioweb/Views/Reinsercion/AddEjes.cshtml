@{
    ViewBag.Title = "Detalles";
    Layout = null;
}


<script>
    function autocomplete(inp, arr) {
        var currentFocus;
        inp.addEventListener("input", function (e) {
            var a, b, i, val = this.value;
            closeAllLists();
            if (!val) { return false; }
            currentFocus = -1;
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            this.parentNode.appendChild(a);
            for (i = 0; i < arr.length; i++) {
                if (arr[i].toUpperCase().includes(val.toUpperCase())) {
                    b = document.createElement("DIV");
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>"; b.addEventListener("click", function (e) {
                        inp.value = this.getElementsByTagName("input")[0].value;

                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });

        inp.addEventListener("keydown", function (e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {

                currentFocus++;

                addActive(x);
            } else if (e.keyCode == 38) { //up

                currentFocus--;

                addActive(x);
            } else if (e.keyCode == 13) {

                e.preventDefault();
                if (currentFocus > -1) {

                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            if (!x) return false;

            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);

            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {

            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }
    //https://stackoverflow.com/questions/50056518/ijsonhelper-does-not-contain-a-definition-for-encode

    var ejes = JSON.parse('@Html.Raw(Json.Serialize(@ViewBag.listaEjes))');
    autocomplete(document.getElementById("ejesSelect"), ejes);
    var lugar = JSON.parse('@Html.Raw(Json.Serialize(@ViewBag.listaLugar))');
    autocomplete(document.getElementById("ejesLugar"), lugar);

</script>

<body>
    <form>
        <div class="col-md-12 separar">
            <label class="control-label">Tipo de Eje</label>
            <input required name="ejesSelect" id="ejesSelect" type="text" class="form-control" />
        </div>
        <div class="col-md-12 separar">
            <label class="control-label">Lugar</label>
            <input required name="ejesLugar" id="ejesLugar" type="text" class="form-control" />
        </div> 
        <div class="col-md-12 separar">
            <label class="control-label">Observaciones </label>
            <input required name="ejesObs" id="ejesObs" type="text" class="form-control" />
        </div>
        <div class="col-md-12 separar">
            <button onclick="guadar()" class="btn btn-primary fa fa-save"> Guardar</button>
        </div>
    </form>
</body>